{"version":3,"sources":["format.js","components/PatientList.js","components/NewPatientForm.js","components/Patients.js","components/PatientInfo.js","components/Appointments.js","components/NewAppointmentForm.js","components/PatientDetails.js","App.js","serviceWorker.js","index.js"],"names":["formatDate","dateStr","Date","toLocaleDateString","formatPhoneNumber","phoneNumber","splitNumber","split","extension","length","match","trim","replace","join","PatientList","props","history","useHistory","className","patients","map","patient","key","patient_id","first_name","last_name","date_of_birth","phone_number","onClick","push","pathname","state","handleClick","NewPatientForm","useState","firstName","lastName","dateOfBirth","formData","setFormData","updateFormData","event","target","name","value","onSubmit","e","preventDefault","axios","post","then","response","alert","updatePatientsList","data","catch","error","console","log","handleSubmit","htmlFor","onChange","placeholder","type","id","required","pattern","Patients","rows","setPatients","query","setQuery","useEffect","a","get","request","fetchData","filter","row","toLowerCase","indexOf","PatientInfo","patientInfo","Appointments","appointments","appointment","appointment_id","start_date","start_time","appointment_type","NewAppointmentForm","startDate","startTime","patientFullName","updateAppointmentsList","PatientDetails","useLocation","setAppointments","goBack","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2dcd60ea.chunk.js","sourcesContent":["export const formatDate = (dateStr) => {\n    let date = new Date(dateStr);\n    return date.toLocaleDateString();\n};\n\nexport const formatPhoneNumber = (phoneNumber) => {\n    let splitNumber = phoneNumber.split(\"x\");\n    let extension = splitNumber.length === 2 ? \" x\" + splitNumber[1] : \"\";\n    let baseNumber = splitNumber[0].trim();\n    var cleaned = ('' + baseNumber).replace(/\\D/g, '')\n    var match = cleaned.match(/^(1|)?(\\d{3})(\\d{3})(\\d{4})$/)\n    if (match) {\n        return ['(', match[2], ') ', match[3], '-', match[4]].join('') + extension; \n    }\n    return null\n}\n\n","import React from 'react';\nimport { formatDate, formatPhoneNumber} from '../format';\nimport { useHistory } from \"react-router-dom\";\n\nfunction PatientList(props) {\n    const history = useHistory();\n\n    const handleClick = (patient) => {\n        history.push({\n            pathname:  `/patientdetails/${patient.patient_id}`,\n            state: {\n              patient: patient \n            } \n        })\n    }\n\n    return (\n        <div> \n            <div className=\"scroll table-container\">\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                        <th>ID</th>\n                        <th>First Name</th>\n                        <th>Last Name</th>\n                        <th>Date of Birth</th>\n                        <th>Phone Number</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        {props.patients.map((patient) => (\n                            <tr className=\"patient-row\" key={patient.patient_id}>\n                                <td>{patient.patient_id}</td>\n                                <td>{patient.first_name}</td>\n                                <td>{patient.last_name}</td>\n                                <td>{formatDate(patient.date_of_birth)}</td>\n                                <td>{formatPhoneNumber(patient.phone_number)}</td>\n                                <td>\n                                    <button className=\"view-profile-btn\" onClick={() => handleClick(patient)}>View Profile</button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default PatientList\n","import React, { useState } from 'react'\nimport axios from 'axios';\n\nfunction NewPatientForm(props) {\n   const [formData, setFormData] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        dateOfBirth: \"\",\n        phoneNumber: \"\",\n        extension: \"\"\n    });\n\n    const updateFormData = event => setFormData({...formData, [event.target.name]: event.target.value});\n\n    const { firstName, lastName, dateOfBirth, phoneNumber, extension } = formData;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        axios.post('http://localhost:8080/addPatient', formData)\n        .then(function (response) {\n            alert(\"New Patient Added!\");\n            props.updatePatientsList([...props.patients, response.data]);\n            setFormData({\n                firstName: \"\",\n                lastName: \"\",\n                dateOfBirth: \"\",\n                phoneNumber: \"\",\n                extension: \"\"\n            });\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n    }\n\n    return (\n        <div className=\"card new-patient-card\">\n            <h1>New Patient</h1>\n            <form onSubmit={e => handleSubmit(e)}>\n                <div className=\"form-row flex-row\">\n                    <label htmlFor=\"first-name\">First Name</label>\n                    <input\n                        value={firstName}\n                        onChange={e => updateFormData(e)}\n                        placeholder=\"\"\n                        type=\"text\"\n                        name=\"firstName\"\n                        id=\"first-name\"\n                        required\n                    />\n                </div>\n                <div className=\"form-row flex-row\">\n                    <label htmlFor=\"last-name\">Last Name</label>\n                    <input\n                        value={lastName}\n                        onChange={e => updateFormData(e)}\n                        placeholder=\"\"\n                        type=\"text\"\n                        name=\"lastName\"\n                        id=\"last-name\"\n                        required\n                    />\n                </div>\n                <div className=\"form-row flex-row\">\n                    <label htmlFor=\"date-of-birth\">Date of Birth</label>\n                    <input\n                        value={dateOfBirth}\n                        onChange={e => updateFormData(e)}\n                        placeholder=\"Date of Birth\"\n                        type=\"date\"\n                        name=\"dateOfBirth\"\n                        id=\"date-of-birth\"\n                        required\n                    />\n                </div>\n                <div className=\"form-row flex-row\">\n                    <label htmlFor=\"phone-number\">Phone</label>\n                    <input\n                        value={phoneNumber}\n                        onChange={e => updateFormData(e)}\n                        placeholder=\"###-###-####\"\n                        type=\"tel\"\n                        pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                        name=\"phoneNumber\"\n                        id=\"phone-number\"\n                        required\n                    />\n                </div>\n                <div className=\"form-row flex-row\">\n                    <label htmlFor=\"extension\">Extension</label>\n                    <input\n                        value={extension}\n                        onChange={e => updateFormData(e)}\n                        placeholder=\"optional\"\n                        type=\"text\"\n                        pattern=\"[0-9]+\"\n                        name=\"extension\"\n                        id=\"extension\"\n                    />\n                </div>\n                <button className=\"submit-btn\" type=\"submit\">Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default NewPatientForm\n","import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport PatientList from './PatientList'\nimport NewPatientForm from './NewPatientForm';\n\nfunction Patients() {\n    const [patients, setPatients] = useState([]);\n    const [query, setQuery] = useState(\"\");\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get('http://localhost:8080/patients');\n            setPatients(request.data); \n            return patients;\n        }\n        fetchData();\n    }, []);\n\n    const search = (rows) => {\n        return rows.filter(\n            (row) => \n                row.first_name.toLowerCase().indexOf(query.toLowerCase()) > -1 ||\n                row.last_name.toLowerCase().indexOf(query.toLowerCase()) > -1\n        );\n    }\n\n    return (\n        <div>\n            <div className=\"patients-container flex-row\">\n                <div className=\"left-content\">\n                    <NewPatientForm  \n                        patients={patients}\n                        updatePatientsList={setPatients}\n                    />\n                </div>\n                <div className=\"right-content\">\n                    <div className=\"card patient-list-card\">\n                        <h1>Patient List</h1>\n                        <div className=\"search-query\">\n                            <input type=\"text\" placeholder=\"search by first name and last name\" value={query} onChange={(e) => setQuery(e.target.value)}/>\n                        </div>\n                        <PatientList patients={search(patients)}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Patients;\n","import React from 'react';\nimport { formatDate, formatPhoneNumber} from '../format';\n\nfunction PatientInfo(props) {\n    return (\n        <div>\n            <div className=\"card info-card\">\n                <h1>Patient Info</h1>\n                <div className=\"flex-row top\">\n                    <div>\n                        <span className=\"category-name\">FIRST NAME  </span>\n                        <span>{props.patientInfo.first_name}</span>\n                    </div>\n                    <div>\n                        <span className=\"category-name\">LAST NAME  </span>\n                        <span>{props.patientInfo.last_name}</span>\n                    </div>\n                </div>\n                <div className=\"flex-row bottom\">\n                    <div>\n                        <span className=\"category-name\">D.O.B  </span>\n                        <span>{formatDate(props.patientInfo.date_of_birth)}</span> \n                    </div>\n                    <div>\n                        <span className=\"category-name\">PHONE #  </span>\n                        <span>{formatPhoneNumber(props.patientInfo.phone_number)}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PatientInfo\n","import React from 'react'\n\nfunction Appointments(props) {\n    return (\n        <div className=\"card appointments-card\">\n            <h1>Appointments</h1>\n            <div className=\"table-container scroll\">\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th>Start Date</th>\n                            <th>Start Time</th>\n                            <th>Type</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {props.appointments.map((appointment) => (\n                            <tr className=\"appointment-row\" key={appointment.appointment_id}>\n                                <td>{appointment.start_date}</td>\n                                <td>{appointment.start_time}</td>\n                                <td>{appointment.appointment_type}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default Appointments\n","import React , { useState } from 'react';\nimport axios from 'axios';\n\nfunction NewAppointmentForm(props) {\n    const [formData, setFormData] = useState({\n        startDate: \"\",\n        startTime: \"\",\n        type: \"\"\n    });\n\n    const updateFormData = event => setFormData({...formData, [event.target.name]: event.target.value});\n\n    const { startDate, startTime, type } = formData;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        let data = {\n            patientFullName: props.patientInfo.first_name + \" \" + props.patientInfo.last_name,\n            startDate: formData.startDate,\n            startTime: formData.startTime,\n            type: formData.type\n        }\n        axios.post('http://localhost:8080/addAppointment', data)\n        .then(function (response) {\n            console.log(response.data)\n            alert(\"New Appointment Added\");\n            props.updateAppointmentsList([...props.appointments, response.data]);\n            setFormData({\n                startDate: \"\",\n                startTime: \"\",\n                type: \"\"\n            });\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n    }\n\n    return (\n        <div className=\"card new-appointment-card\">\n            <h1>New Appointment</h1>\n            <form onSubmit={e => handleSubmit(e)}>\n                <div className=\"form-row flex-row\">\n                    <label htmlFor=\"start-date\">Start Date</label>\n                    <input\n                        value={startDate}\n                        onChange={e => updateFormData(e)}\n                        placeholder=\"\"\n                        type=\"date\"\n                        name=\"startDate\"\n                        id=\"start-date\"\n                        required\n                    />\n                </div>\n                <div className=\"form-row flex-row\">\n                    <label htmlFor=\"start-time\">Start Time</label>\n                    <input\n                        value={startTime}\n                        onChange={e => updateFormData(e)}\n                        placeholder=\"\"\n                        type=\"time\"\n                        name=\"startTime\"\n                        id=\"start-time\"\n                        required\n                    />\n                </div>\n                <div className=\"form-row flex-row\">\n                    <label htmlFor=\"type\">Type</label>\n                    <input\n                        value={type}\n                        onChange={e => updateFormData(e)}\n                        placeholder=\"\"\n                        type=\"text\"\n                        name=\"type\"\n                        id=\"type\"\n                        required\n                    />\n                </div>\n                <button className=\"submit-btn\" type=\"submit\">Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default NewAppointmentForm\n","import React, { useState, useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport PatientInfo from './PatientInfo';\nimport Appointments from './Appointments';\nimport NewAppointmentForm from './NewAppointmentForm';\n\nfunction PatientDetails() {\n    const location = useLocation();\n    const patientInfo = location.state.patient;\n    const patientFullName = patientInfo.first_name + \" \" +  patientInfo.last_name;\n    const [appointments, setAppointments] = useState([]); \n    const history = useHistory();\n    \n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(`http://localhost:8080/appointments?name=${patientFullName}`);\n            setAppointments(request.data);\n            return appointments;\n        }\n        fetchData();\n    }, [patientInfo]);\n\n    const goBack = () => {\n        history.goBack();\n    }\n\n    return (\n        <div className=\"patient-details-container flex-row\">\n            <div className=\"left-content\">\n                <PatientInfo patientInfo={patientInfo} />\n                <NewAppointmentForm \n                    patientInfo={patientInfo}\n                    appointments={appointments}\n                    updateAppointmentsList={setAppointments}\n                />\n                <button className=\"back-btn\" onClick={goBack}>Go Back</button>\n            </div>\n            <div className=\"right-content\">\n                <Appointments appointments={appointments} />\n            </div>\n        </div>\n    )\n}\n\nexport default PatientDetails\n","import React from 'react';\nimport Patients from './components/Patients'\nimport PatientDetails from './components/PatientDetails'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from \"react-router-dom\";\nimport './styles.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Patients} />\n          <Route exact path=\"/patientdetails/:id\" component={PatientDetails} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}